@{
    ViewBag.Title = "BudgetDefineList";
}

<div id="mainLayout" class="mini-layout" style="width: 100%; height: 100%;">
    <div title="预算单元" region="west" width="500" expanded="true" showspliticon="false" showheader="false" style="border-top:0px;">
        <div class="mini-toolbar" style="padding: 0px; border-bottom: 0;">
            <table style="width: 100%;">
                <tr>
                    <td style="width: 100%;">
                        <a class="mini-button" iconcls="icon-add" onclick="addUnit" plain="true">增加预算单元</a>
                        <a class="mini-button" iconcls="icon-edit" onclick="edit({gridId:'budgetUnitGrid', width:700,height:600});" plain="true">编辑</a>
                        <a class="mini-button" iconcls="icon-remove" onclick="removeUnit" plain="true">删除</a>

                        @*<a class="mini-button" iconcls="icon-save" onclick="saveData();" plain="true">保存</a>*@
                    </td>
                    <td style="white-space: nowrap;"></td>
                </tr>
            </table>
        </div>
        <div class="mini-fit">
            <div id="budgetUnitGrid" url="" class="mini-datagrid" style="width: 100%; height: 100%;" idfield="ID" multiselect="false" showpager="false"
                 borderstyle="border-left:0px;border-right:0px;border-bottom:0px;" onselectionchanged="onSelectionChanged"
                 allowcellselect="true" editnextonenterkey="true" editnextrowcell="true" allowcelledit="false">
                <div property="columns">
                    <div type="indexcolumn">
                    </div>
                    <div field="Name" width="120" headeralign="center" allowsort="false">
                        名称
                    </div>
                    <div field="IsDefault" type="checkboxcolumn" truevalue="true" falsevalue="false" width="60" headeralign="center" align="center">默认</div>
                    <div field="Description" width="200" headeralign="center" allowsort="false" align="left">
                        描述说明<input property="editor" class="mini-textbox" style="width: 100%;" />
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div title="center" region="center">
        <div class="mini-toolbar" style="padding: 0px; border-bottom: 0;">
            <table style="width: 100%;">
                <tr>
                    <td style="width: 100%;">
                        <a class="mini-button" iconcls="icon-add" onclick="onAddChild();" plain="true">增加CBS</a>
                        @*<a class="mini-button" iconcls="icon-add" onclick="onAddSubject();" plain="true">增加科目</a>*@
                        <a class="mini-button" iconcls="icon-remove" onclick="delNode();" plain="true">删除</a>
                        <a class="mini-button" iconcls="icon-save" onclick="saveNodes();" plain="true">保存</a>
                    </td>
                    <td style="white-space: nowrap;"></td>
                </tr>
            </table>
        </div>
        <div class="mini-fit">
            <div id="dataTree" class="mini-treegrid" style="width:100%;height:100%;"
                 url="" showtreeicon="true" treecolumn="Name" idfield="ID" parentfield="ParentID" resultastree="false" ondrawcell="onDrawingCell"
                 allowcellselect="true" editnextonenterkey="true" editnextrowcell="true" allowcelledit="true" expandonload="true" oncellbeginedit="OnCellBeginEdit" oncellendedit="onCellEndEdit"
                 sortfield="SortIndex" sortorder="asc" multiselect="true" iconfield="NodeType" showsummaryrow="true"
                 allowresize="false" fitcolumns="false">
                <div property="columns">
                    <div type="checkcolumn"></div>
                    <div type="indexcolumn"></div>
                    <div name="Name" field="Name" headeralign="center" width="200">
                        名称<input property="editor" class="mini-textbox" style="width: 100%;" />
                    </div>
                    <div type="comboboxcolumn" autoshowpopup="true" field="NodeType" headeralign="center" width="80" align="center">
                        类型
                        <input property="editor" class="mini-combobox" style="width:100%;" data="CBSNodeType" />
                    </div>
                    <div field="AllowAddChild" type="checkboxcolumn" truevalue="1" falsevalue="0" width="60" headeralign="center" align="center">允许新增</div>
                    <div field="AllowEdit" type="checkboxcolumn" truevalue="1" falsevalue="0" width="60" headeralign="center" align="center">允许编辑</div>
                    <div field="AllowDelete" type="checkboxcolumn" truevalue="1" falsevalue="0" width="60" headeralign="center" align="center">允许删除</div>
                    <div field="Constraints" type="checkboxcolumn" truevalue="1" falsevalue="0" width="60" headeralign="center" align="center">预算限制</div>
                    <div field="DefaultScale" headeralign="center" width="100" align="right">
                        预算比例（%）
                        <input property="editor" class="mini-textbox" style="width: 100%;" />
                    </div>
                    @*<div type="comboboxcolumn" autoshowpopup="true" field="InputType" headeralign="center" width="80" align="center">
                            输入方式
                            <input property="editor" class="mini-combobox" style="width:100%;" data="InputType" />
                        </div>*@
                    <div field="CalExpression" headeralign="center" width="300">
                        计算公式
                        <input property="editor" class="mini-textbox" style="width: 100%;" />
                    </div>
                    <div field="CalDescription" headeralign="center" width="300">
                        公式说明
                        <input property="editor" class="mini-textbox" style="width: 100%;" />
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<ul id="gridMenu" class="mini-contextmenu" onbeforeopen="onBeforeOpen">
    <li name="add" iconcls="icon-add" onclick="onAdd">下方插入行</li>
    <li name="addChild" iconcls="icon-add" onclick="onAddSubject">增加科目</li>
    <li name="remove" iconcls="icon-remove" onclick="delNode">删除行</li>
</ul>
<script type="text/javascript">
    @Html.GetEnum(typeof(Expenses.Logic.CBSNodeType))

</script>
<script type="text/javascript">


    addGridEnum("budgetUnitGrid", "NodeType", "CBSNodeType");

    addGridButton("budgetUnitGrid", "Condition", {
        linkText: '设置', onButtonClick: function (row) {
            var url = "ConditionSettings";
            openWindow(url, {
                width: 750, height: 400, title: "设置", data: row["Condition"], onDestroy: function (data) {
                    if (data != "close")
                        row["Condition"] = mini.encode(data);
                }
            });
        }
    });

    var InputType = [{ text: "手工输入", value: "Input" }, { text: "自动计算", value: "AutoCal" }];
    var defineID = getQueryString("DefineID");
    $("#budgetUnitGrid").attr("url", "GetBudgetUnit?DefineID=" + defineID);

    function onSelectionChanged(e) {
        if (e.selected) {
            mini.get("dataTree").setUrl("GetSubjectTree?DefineBudgetID=" + e.selected.ID);
        }
        else {
            mini.get("dataTree").clearRows();
        }
    }

    function addUnit() {
        var url = "/MvcConfig/UI/List/PageView?TmplCode=BudgetUnitDefineSelector&DefineID=" + defineID;
        openWindow(url, {
            refresh: false, title: "收入单元选择", width: 700, height: 600,
            onDestroy: function (data) {
                if (!data || data.length == 0 || data == "close") { return; }
                addExecuteParam("ListData", mini.encode(data));
                addExecuteParam("DefineID", defineID);
                execute("AddBudgetDefine", {
                    showLoading: true, refresh: false, onComplete: function (data) {
                        mini.get("budgetUnitGrid").reload();
                    }, validateForm: false
                });
            }
        });
    }

    function removeUnit() {
        var dataGrid = mini.get("budgetUnitGrid");
        var rows = dataGrid.getSelecteds();
        if (rows.length == 0) {
            msgUI("请至少选择一条记录"); return;
        }
        msgUI("您确定要删除吗？", 2, function (result) {
            if (result != "ok") return;
            var ids = "";
            for (var i = 0; i < rows.length; i++) {
                if (i == rows.length - 1) {
                    ids += rows[i].ID;
                }
                else {
                    ids += rows[i].ID + ",";
                }
            }
            addExecuteParam("ListIDs", ids);
            execute("RemoveBudgetDefine", {
                showLoading: true, refresh: false, onComplete: function (data) {
                    dataGrid.reload();
                    mini.get("detailGrid").clearRows();
                }, validateForm: false
            });
        });
    }

    function saveData() {
        var dataGrid = mini.get("budgetUnitGrid");
        dataGrid.commitEdit(); dataGrid.accept();
        var list = dataGrid.getData();
        addExecuteParam("DefineID", defineID);
        addExecuteParam("ListData", mini.encode(list));
        execute("SaveData", {
            showLoading: true, refresh: false, onComplete: function (data) {
                dataGrid.reload();
            }, validateForm: false
        });
    }


    function onAddSubject() {
        var dataTree = mini.get("dataTree");
        var node = dataTree.getSelectedNode();
        if (!node) {
            msgUI("请选择一个节点");
            return;
        }
        var url = "/Expenses/SubjectSelector/MultiTreeSelector";
        openWindow(url, {
            refresh: false, title: "科目选择", width: 700, height: 600,
            onDestroy: function (data) {
                if (!data || data.length == 0 || data == "close") return;
                addExecuteParam("DefineID", defineID);
                addExecuteParam("ParentNodeID", node.ID);
                addExecuteParam("ListData", mini.encode(data));
                execute("AddSubject", {
                    showLoading: true, refresh: false, onComplete: function (data) {
                        dataTree.reload();
                    }, validateForm: false
                });
            }
        });
    }

    function OnCellBeginEdit(e) {
        var record = e.record, field = e.field; var treeGrid = e.sender;
        if (record.NodeType == "Root") {
            e.cancel = true; return;
        }
        else if (field == "NodeType") {
            e.cancel = true; return;
        }
        var isLeaf = treeGrid.isLeaf(record);
        if (!isLeaf && field == "CalExpression") {
            e.cancel = true; return;
        }
    }

    function onCellEndEdit(e) {
        var treeGrid = mini.get("dataTree");
        var record = e.record, field = e.field;
        //if (record.NodeType == "Root") {
        //    return;
        //}

        if (e.field == 'DefaultScale') {
            reCalcParentScale(record.ParentID);
        }
    }


    function onDrawingCell(e) {
        var treeGrid = e.sender;
        var record = e.record;
        var column = e.column;
        var field = e.field;
        if (record.NodeType == "Root") {
            e.cellStyle = "font-weight:bolder; background:#F0F0F0";
        }
        else if (field == "NodeType") {
            e.cellStyle = "background:#F0F0F0;";
        }
        var isLeaf = treeGrid.isLeaf(record);
        if (field == "CalExpression" && !isLeaf) {
            e.cellStyle = "background:#F0F0F0;";
        }
    }

    function onAddChild() {
        var dataGrid = mini.get("budgetUnitGrid");
        var row = dataGrid.getSelected();
        if (!row) {
            msgUI("请选择一个预算单元"); return;
        }
        var dataTree = mini.get("dataTree");
        var node = dataTree.getSelectedNode();
        var nodeID = "";
        if (node) {
            nodeID = node.ID;
        }
        var fullID = row.NodeFullID;
        var url = "/Expenses/CBSDefineNodeSelector/TreeList?FullID=" + fullID;
        openWindow(url, {
            refresh: false, title: "CBS定义选择", width: 700, height: 600,
            onDestroy: function (data) {
                if (!data || data.length == 0 || data == "close") {
                    return;
                }
                addExecuteParam("DefineBudgetID", row.ID);
                addExecuteParam("DefineUnitNodeID", row.NodeID);
                addExecuteParam("ParentNodeID", nodeID);
                addExecuteParam("Nodes", mini.encode(data));
                execute("AddNode", {
                    showLoading: true, refresh: false, onComplete: function (data) {
                        dataTree.reload();
                    }, validateForm: false
                });
            }
        });
    }

    function delNode() {
        var dataTree = mini.get("dataTree");
        var nodes = dataTree.getSelecteds();
        if (nodes.length == 0) {
            msgUI("请至少选择一个科目"); return;
        }

        msgUI("您确定要删除选中的科目吗？", 2, function (result) {
            if (result != "ok") return;
            var ids = "";
            for (var i = 0; i < nodes.length; i++) {
                if (i == nodes.length - 1) {
                    ids += nodes[i].ID;
                }
                else {
                    ids += nodes[i].ID + ",";
                }
            }
            addExecuteParam("Ids", ids);
            execute("DeleteNodes", {
                showLoading: true, refresh: false, onComplete: function (data) {
                    dataTree.removeNodes(nodes);
                }, validateForm: false
            });
        });
    }

    function saveNodes() {
        var tree = mini.get("dataTree");
        var nodes = tree.getChanges();
        addExecuteParam("ListData", mini.encode(nodes));
        execute("SaveNodes", {
            showLoading: true, refresh: false, onComplete: function (data) {
                tree.reload();
            }, validateForm: false
        });
    }

    function collapseLevel() {
        var level = mini.getbyName("ExpandedNodeType").getValue();
        var tree = mini.get("dataTree");
        tree.expandAll();
        tree.collapseLevel(level);
    }

    function treeSearch() {
        var tree = mini.get("dataTree");
        var key = mini.get("key").getValue();
        if (key == "") {
            tree.clearFilter();
        } else {
            key = key.toLowerCase();
            tree.filter(function (node) {
                var text = node.Name ? node.Name.toLowerCase() : "";
                if (text.indexOf(key) != -1) {
                    return true;
                }
            });
        }
    }

    function onBeforeOpen(e) {
        var dataTree = mini.get("dataTree");
        var menu = e.sender;
        var node = dataTree.getSelectedNode();
        if (!node) {
            e.cancel = true;
            //阻止浏览器默认右键菜单
            e.htmlEvent.preventDefault();
            return;
        }
        var addItem = mini.getbyName("add", menu);
        var removeItem = mini.getbyName("remove", menu);
        var addChildItem = mini.getbyName("addChild", menu);
        addItem.hide();
        removeItem.hide();
        addChildItem.hide();
        if (node.NodeType == "Root") {
            addChildItem.show();
        }
        else if (node.NodeType == "Subject") {
            removeItem.show();
        }
        else {
            addItem.show();
            removeItem.show();
            addChildItem.show();
        }
    }

    function onGiveFeedback(e) {
        var tree = e.sender;
        var node = e.node;              //被拖拽的节点
        var targetNode = e.targetNode;  //目标投放节点
        var effect = e.effect;          //投放方式：add|before|after
        if (node.NodeType == "Root") {
            e.effect = "no";
        }
    }

    function onNodeDrop(e) {
        var tree = mini.get("dataTree");
        addExecuteParam("sourceID", e.dragNode.ID);
        addExecuteParam("targetID", e.dropNode.ID);
        addExecuteParam("dragAction", e.dragAction);
        execute("MoveNode", {
            showLoading: false, refresh: false, onComplete: function (data) {
                tree.updateNode(e.dragNode, data);
                tree.acceptRecord(e.dragNode);
            }, validateForm: false
        });
    }

    function reCalcParentScale(id) {
        var currentNode = getNode(id);
        if (!currentNode)
            return;

        var dataTree = mini.get('dataTree');
        var children = dataTree.findNodes(function (node) {
            if (node.ParentID == id) return true;
        });

        var res = 0;
        for (i = 0; i < children.length; i++) {
            var tmp = parseFloat(children[i].DefaultScale);
            res += isNaN(tmp) ? 0 : tmp;
        }
        dataTree.updateNode(currentNode, { DefaultScale: res });



        reCalcParentScale(currentNode.ParentID);
    }

    function getNode(ID) {
        var dataTree = mini.get('dataTree');
        var nodes = dataTree.findNodes(function (node) {
            if (node.ID == ID) return true;
        });

        if (nodes.length == 0)
            return;

        return nodes[0];
    }
</script>